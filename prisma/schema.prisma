// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            Int       @id @default(autoincrement())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    projects      Project[]
    twitter       String?
    github        String?
    youtube       String?
    instagram     String?
    resume        String?
    likes         Like[]
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id        Int       @id @default(autoincrement())
    title     String
    image     String?
    user      User      @relation(fields: [userId], references: [id])
    userId    Int
    createdAt DateTime  @default(now())
    likes     Like[]
    comments  Comment[]

    @@index([userId])
}

model Comment {
    id        Int      @id @default(autoincrement())
    comment   String?
    image     String?
    repliedTo Post     @relation(fields: [postId], references: [id])
    postId    Int
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    likes     Like[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    @@index([postId])
    @@index([userId])
}

model Like {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    post      Post?    @relation(fields: [postId], references: [id])
    postId    Int?
    comment   Comment? @relation(fields: [commentId], references: [id])
    commentId Int?
    createdAt DateTime @default(now())

    @@index([postId])
    @@index([userId])
    @@index([commentId])
}

model Project {
    id         Int     @id @default(autoincrement())
    title      String
    image      String?
    link       String?
    githubLink String?
    user       User    @relation(fields: [userId], references: [id])
    userId     Int

    @@index([userId])
}
